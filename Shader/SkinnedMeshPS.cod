//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 view_projection;// Offset:    0 Size:    64 [unused]
//   float4 light_direction;            // Offset:   64 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerState                      sampler      NA          NA             s0      1 
// textureMap                        texture  float4          2d             t0      1 
// normalMap                         texture  float4          2d             t1      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyzw
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   v2.x <- pin.world_normal.x; v2.y <- pin.world_normal.y; v2.z <- pin.world_normal.z; v2.w <- pin.world_normal.w; 
//   v3.x <- pin.tangent.x; v3.y <- pin.tangent.y; v3.z <- pin.tangent.z; v3.w <- pin.tangent.w; 
//   v4.x <- pin.binormal.x; v4.y <- pin.binormal.y; v4.z <- pin.binormal.z; 
//   v5.x <- pin.color.x; v5.y <- pin.color.y; v5.z <- pin.color.z; v5.w <- pin.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 9 "C:\Users\2230083\Desktop\個人制作\HLSL\SkinnedMeshPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z; r0.w <- color.w

#line 10
mov r0.w, r0.w  // r0.w <- alpha

#line 12
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t1.xyzw, s0
mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r2.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z

#line 13
mov r2.x, v3.x  // r2.x <- CM._m00
mov r3.x, v3.y  // r3.x <- CM._m01
mov r4.x, v3.z  // r4.x <- CM._m02
mov r2.y, v4.x  // r2.y <- CM._m10
mov r3.y, v4.y  // r3.y <- CM._m11
mov r5.x, v4.z  // r5.x <- CM._m12
mov r5.yzw, v2.xxyz  // r5.y <- CM._m20; r5.z <- CM._m21; r5.w <- CM._m22

#line 14
mov r2.z, r5.y
dp3 r2.x, r1.xyzx, r2.xyzx
mov r3.z, r5.z
dp3 r2.y, r1.xyzx, r3.xyzx
mov r4.yz, r5.xxwx
dp3 r2.z, r1.xyzx, r4.xyzx
dp3 r1.x, r2.xyzx, r2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, r2.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 16
mov r2.xyz, -cb1[4].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z

#line 17
itof r1.w, l(0)
dp3 r1.x, r1.xyzx, r2.xyzx
mul r1.x, r1.x, l(0.500000)
add r1.x, r1.x, l(0.500000)
max r1.x, r1.x, r1.w
mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z

#line 19
mul o0.xyzw, r0.xyzw, v5.xyzw
ret 
// Approximately 34 instruction slots used
